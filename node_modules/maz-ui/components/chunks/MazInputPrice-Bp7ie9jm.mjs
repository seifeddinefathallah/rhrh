import { getCurrentInstance as K, computed as s, defineComponent as P, defineAsyncComponent as h, ref as V, onMounted as Q, useSlots as W, openBlock as u, createElementBlock as g, normalizeClass as $, normalizeStyle as X, createElementVNode as z, createCommentVNode as i, renderSlot as F, createBlock as p, unref as f, resolveDynamicComponent as S, withDirectives as Z, mergeProps as x, toHandlers as _, vModelDynamic as ee, createTextVNode as te, toDisplayString as oe, withModifiers as re, withCtx as C, createVNode as E, nextTick as ne, onBeforeMount as ae } from "vue";
import '../assets/MazInputPrice.css';const le = {
  style: "currency",
  minimumFractionDigits: 2,
  round: !1
};
function ie(a, l, t) {
  let r = Number(a);
  return t.round && (r = Math.floor(r), t.minimumFractionDigits = 0), new Intl.NumberFormat(l, t).format(r);
}
function ue(a, l, t) {
  if (a === void 0)
    throw new TypeError("[maz-ui](FilterCurrency) The `number` attribute is required.");
  if (l === void 0)
    throw new TypeError("[maz-ui](FilterCurrency) The `locale` attribute is required.");
  if (typeof l != "string")
    throw new TypeError("[maz-ui](FilterCurrency) The `locale` attribute must be a string.");
  if (t.currency === void 0)
    throw new TypeError("[maz-ui](FilterCurrency) The `options.currency` attribute is required.");
}
function se(a, l, t) {
  const r = {
    ...le,
    ...t
  };
  ue(a, l, r);
  try {
    return ie(a, l, r);
  } catch (d) {
    throw new Error(`[maz-ui](FilterCurrency) ${d}`);
  }
}
function de({
  componentName: a,
  providedId: l
}) {
  const t = K();
  return s(() => l ?? `${a}-${t == null ? void 0 : t.uid}`);
}
function ce(a, l) {
  let t;
  return function(...r) {
    clearTimeout(t), t = setTimeout(() => {
      a.apply(this, r);
    }, l);
  };
}
const me = {
  key: 0,
  class: "m-input-wrapper-left"
}, fe = { class: "m-input-wrapper-input" }, pe = ["id", "type", "name", "inputmode", "placeholder", "aria-label", "disabled", "readonly", "required"], ve = { key: 0 }, ye = {
  key: 1,
  class: "m-input-wrapper-right"
}, be = /* @__PURE__ */ P({
  inheritAttrs: !1,
  __name: "MazInput",
  props: {
    style: { default: void 0 },
    class: { default: void 0 },
    modelValue: { default: void 0 },
    placeholder: { default: void 0 },
    label: { default: void 0 },
    name: { default: void 0 },
    color: { default: "primary" },
    type: { default: "text" },
    required: { type: Boolean, default: !1 },
    disabled: { type: Boolean, default: !1 },
    readonly: { type: Boolean, default: !1 },
    id: { default: void 0 },
    error: { type: Boolean, default: !1 },
    success: { type: Boolean, default: !1 },
    warning: { type: Boolean, default: !1 },
    hint: { default: void 0 },
    inputClasses: { default: void 0 },
    noBorder: { type: Boolean, default: !1 },
    noRadius: { type: Boolean, default: !1 },
    inputmode: { default: "text" },
    size: { default: "md" },
    debounce: { type: [Boolean, Number], default: !1 },
    debounceDelay: { default: 500 },
    validButton: { type: Boolean, default: !1 },
    validButtonLoading: { type: Boolean, default: !1 },
    autoFocus: { type: Boolean, default: !1 },
    borderActive: { type: Boolean, default: !1 },
    leftIcon: { type: [String, Function, Object], default: void 0 },
    rightIcon: { type: [String, Function, Object], default: void 0 },
    roundedSize: { default: void 0 },
    block: { type: Boolean }
  },
  emits: ["update:model-value", "focus", "blur", "click", "change"],
  setup(a, { emit: l }) {
    const t = a, r = l, d = h(() => import("./MazBtn-DRTBFUgW.mjs")), w = h(() => import("./MazIcon-BDGxCy9M.mjs")), N = h(() => import("./eye-slash-tjfxO0LK.mjs")), k = h(() => import("./eye-DqO_Jx56.mjs")), v = h(() => import("./check-CL-vqe79.mjs")), y = V(!1), m = V(!1), n = V(), o = de({
      componentName: "MazInput",
      providedId: t.id
    });
    Q(() => {
      var e;
      t.autoFocus && ((e = n.value) == null || e.focus());
    });
    const b = s(() => t.type === "password"), M = s(() => y.value ? "text" : t.type), q = s(() => {
      if (!t.noBorder) {
        if (t.error)
          return "maz-border-danger";
        if (t.success)
          return "maz-border-success";
        if (t.warning)
          return "maz-border-warning";
        if (m.value || t.borderActive) {
          if (t.color === "black")
            return "maz-border-black";
          if (t.color === "danger")
            return "maz-border-danger";
          if (t.color === "info")
            return "maz-border-info";
          if (t.color === "primary")
            return "maz-border-primary";
          if (t.color === "secondary")
            return "maz-border-secondary";
          if (t.color === "success")
            return "maz-border-success";
          if (t.color === "warning")
            return "maz-border-warning";
          if (t.color === "white")
            return "maz-border-white";
        }
        return "--default-border";
      }
    }), T = W(), A = s(() => {
      const { required: e, placeholder: c } = t;
      if (c)
        return e ? `${c} *` : c;
    }), D = s(() => I.value !== void 0 && I.value !== ""), O = ce(
      (e) => {
        r("update:model-value", e);
      },
      typeof t.debounce == "number" ? t.debounce : t.debounceDelay ?? 500
    );
    function R(e) {
      if (t.debounce)
        return O(e);
      r("update:model-value", e);
    }
    const I = s({
      get: () => t.modelValue,
      set: (e) => R(e)
    }), j = s(() => (!!t.label || !!t.hint) && (m.value || !!D.value || !!t.placeholder || ["date", "month", "week"].includes(t.type))), U = s(() => !!t.label || !!t.hint);
    function L() {
      return !!T["right-icon"] || b.value || !!T["valid-button"] || t.validButton || !!t.rightIcon;
    }
    function H() {
      return !!T["left-icon"] || !!t.leftIcon;
    }
    function Y(e) {
      r("focus", e), m.value = !0;
    }
    function G(e) {
      r("blur", e), m.value = !1;
    }
    function J(e) {
      return r("change", e);
    }
    return (e, c) => (u(), g(
      "div",
      {
        class: $(["m-input", [
          {
            "--is-focused": m.value || e.borderActive,
            "--should-up": j.value,
            "--has-label": U.value,
            "--is-disabled": e.disabled,
            "--is-readonly": e.readonly,
            "--has-z-2": e.error || e.warning || e.success,
            "--has-state": e.error || e.warning || e.success,
            "--block": e.block
          },
          t.class,
          `--${e.color}`,
          `--${e.size}`
        ]]),
        style: X(e.style)
      },
      [
        z(
          "div",
          {
            class: $(["m-input-wrapper", [
              e.inputClasses,
              q.value,
              e.roundedSize ? `--rounded-${e.roundedSize}` : { "maz-rounded": !e.noRadius }
            ]])
          },
          [
            H() ? (u(), g("div", me, [
              i(`
          @slot left-icon - The icon to display on the left of the input
        `),
              e.$slots["left-icon"] || e.leftIcon ? F(e.$slots, "left-icon", { key: 0 }, () => [
                typeof e.leftIcon == "string" ? (u(), p(f(w), {
                  key: 0,
                  name: e.leftIcon,
                  class: "maz-text-xl maz-text-muted"
                }, null, 8, ["name"])) : e.leftIcon ? (u(), p(S(e.leftIcon), {
                  key: 1,
                  class: "maz-text-xl maz-text-muted"
                })) : i("v-if", !0)
              ], !0) : i("v-if", !0)
            ])) : i("v-if", !0),
            z("div", fe, [
              Z(z("input", x({
                id: f(o),
                ref_key: "input",
                ref: n,
                "onUpdate:modelValue": c[0] || (c[0] = (B) => I.value = B),
                type: M.value,
                name: e.name
              }, e.$attrs, {
                inputmode: e.inputmode,
                placeholder: A.value,
                "aria-label": e.label || e.placeholder,
                disabled: e.disabled,
                readonly: e.readonly,
                required: e.required,
                class: "m-input-input"
              }, _({
                blur: G,
                focus: Y,
                change: J
              }, !0), {
                onClick: c[1] || (c[1] = (B) => e.$emit("click", B))
              }), null, 16, pe), [
                [ee, I.value]
              ]),
              e.label || e.hint ? (u(), g(
                "span",
                {
                  key: 0,
                  class: $(["m-input-label", [
                    {
                      "maz-text-danger-600": e.error,
                      "maz-text-success-600": e.success,
                      "maz-text-warning-600": e.warning
                    }
                  ]])
                },
                [
                  te(
                    oe(e.hint || e.label) + " ",
                    1
                    /* TEXT */
                  ),
                  e.required ? (u(), g("sup", ve, "*")) : i("v-if", !0)
                ],
                2
                /* CLASS */
              )) : i("v-if", !0)
            ]),
            L() ? (u(), g("div", ye, [
              i(`
          @slot right-icon - The icon to display on the right of the input
        `),
              e.$slots["right-icon"] || e.rightIcon ? F(e.$slots, "right-icon", { key: 0 }, () => [
                typeof e.rightIcon == "string" ? (u(), p(f(w), {
                  key: 0,
                  name: e.rightIcon,
                  class: "maz-text-xl maz-text-muted"
                }, null, 8, ["name"])) : e.rightIcon ? (u(), p(S(e.rightIcon), {
                  key: 1,
                  class: "maz-text-xl maz-text-muted"
                })) : i("v-if", !0)
              ], !0) : i("v-if", !0),
              b.value ? (u(), p(f(d), {
                key: 1,
                color: "transparent",
                tabindex: "-1",
                size: "mini",
                onClick: c[2] || (c[2] = re((B) => y.value = !y.value, ["stop"]))
              }, {
                default: C(() => [
                  y.value ? (u(), p(f(N), {
                    key: 0,
                    class: "maz-text-xl maz-text-muted"
                  })) : (u(), p(f(k), {
                    key: 1,
                    class: "maz-text-xl maz-text-muted"
                  }))
                ]),
                _: 1
                /* STABLE */
              })) : i("v-if", !0),
              i(`
          @slot valid-button - Replace the valid button by your own
        `),
              e.$slots["valid-button"] || e.validButton ? F(e.$slots, "valid-button", { key: 2 }, () => [
                E(f(d), {
                  color: "transparent",
                  disabled: e.disabled,
                  tabindex: "-1",
                  loading: e.validButtonLoading,
                  class: "m-input-valid-button",
                  size: "mini",
                  type: "submit"
                }, {
                  default: C(() => [
                    E(f(v), { class: "maz-text-2xl maz-text-normal" })
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["disabled", "loading"])
              ], !0) : i("v-if", !0)
            ])) : i("v-if", !0)
          ],
          2
          /* CLASS */
        )
      ],
      6
      /* CLASS, STYLE */
    ));
  }
}), he = (a, l) => {
  const t = a.__vccOpts || a;
  for (const [r, d] of l)
    t[r] = d;
  return t;
}, ge = /* @__PURE__ */ he(be, [["__scopeId", "data-v-e9affc48"]]), ze = /* @__PURE__ */ z(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor",
    "aria-hidden": "true",
    class: "maz-text-mute maz-ml-1 maz-h-6 maz-w-6"
  },
  [
    /* @__PURE__ */ z("path", {
      "stroke-linecap": "round",
      "stroke-linejoin": "round",
      "stroke-width": "2",
      d: "M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"
    })
  ],
  -1
  /* HOISTED */
), ke = /* @__PURE__ */ P({
  __name: "MazInputPrice",
  props: {
    modelValue: { default: void 0 },
    currency: { default: "EUR" },
    locale: { default: "fr-FR" },
    min: { default: 0 },
    max: { default: Number.POSITIVE_INFINITY },
    noIcon: { type: Boolean, default: !1 },
    block: { type: Boolean }
  },
  emits: ["update:model-value", "formatted"],
  setup(a, { emit: l }) {
    const t = a, r = l, d = V(!1), w = s(() => v(t.modelValue).toString()), N = s(() => {
      const n = typeof t.modelValue == "string" ? Number(t.modelValue) : t.modelValue;
      return v(n);
    }), k = s(
      () => se(N.value, t.locale, { currency: t.currency })
    );
    function v(n) {
      let o = typeof n == "string" ? Number.parseFloat(
        n.replace(",", ".").replaceAll(/[^\d.]/g, "")
      ) : n;
      return (!o || Number.isNaN(o)) && (o = 0), o < t.min && (o = t.min), o > t.max && (o = t.max), o;
    }
    const y = s({
      get: () => {
        if (d.value)
          return w.value;
        if (typeof t.modelValue == "number")
          return k.value;
      },
      set: (n) => {
        if (Number.isNaN(n))
          m();
        else {
          const o = v(n);
          m(o);
        }
      }
    });
    async function m(n) {
      const o = typeof n == "number" ? v(n) : void 0;
      r("update:model-value", o), await ne(), r("formatted", k.value);
    }
    return ae(() => {
      m(v(t.modelValue));
    }), (n, o) => (u(), p(ge, {
      modelValue: y.value,
      "onUpdate:modelValue": o[0] || (o[0] = (b) => y.value = b),
      class: "maz-input-price",
      block: n.block,
      onFocus: o[1] || (o[1] = (b) => d.value = !0),
      onBlur: o[2] || (o[2] = (b) => d.value = !1)
    }, {
      "left-icon": C(() => [
        n.noIcon ? i("v-if", !0) : F(n.$slots, "left-icon", { key: 0 }, () => [
          ze
        ])
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["modelValue", "block"]));
  }
});
export {
  he as _,
  ke as a
};
