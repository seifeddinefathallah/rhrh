import { defineComponent as q, defineAsyncComponent as w, useAttrs as ne, useSlots as U, onBeforeMount as te, computed as r, openBlock as a, createBlock as u, resolveDynamicComponent as S, normalizeClass as z, withCtx as F, createElementBlock as v, createCommentVNode as i, renderSlot as C, unref as f, getCurrentInstance as oe, ref as O, onMounted as le, normalizeStyle as K, createElementVNode as T, withDirectives as ae, mergeProps as Y, toHandlers as ie, vModelDynamic as re, createTextVNode as se, toDisplayString as ue, withModifiers as j, createVNode as N, withKeys as L } from "vue";
import '../assets/MazInputNumber.css';function G(m, l) {
  let n;
  return function(...d) {
    clearTimeout(n), n = setTimeout(() => {
      m.apply(this, d);
    }, l);
  };
}
const de = /* @__PURE__ */ q({
  __name: "MazBtn",
  props: {
    variant: { default: "button" },
    size: { default: "md" },
    color: { default: "primary" },
    type: { default: "button" },
    rounded: { type: Boolean },
    roundedSize: { default: "lg" },
    noRounded: { type: Boolean },
    outline: { type: Boolean },
    pastel: { type: Boolean },
    block: { type: Boolean },
    noUnderline: { type: Boolean },
    loading: { type: Boolean },
    disabled: { type: Boolean },
    fab: { type: Boolean },
    icon: { type: [String, Function, Object], default: void 0 },
    leftIcon: { type: [String, Function, Object], default: void 0 },
    rightIcon: { type: [String, Function, Object], default: void 0 },
    noPadding: { type: Boolean },
    noElevation: { type: Boolean },
    contentClass: { default: void 0 }
  },
  setup(m) {
    const l = m, n = w(() => import("./MazSpinner-DVkxyBoy.mjs")), d = w(() => import("./MazIcon-BDGxCy9M.mjs")), { href: s, to: M } = ne(), k = U();
    te(() => {
      l.icon && !l.fab && console.error('[maz-ui](MazBtn) the prop "icon" must be used only with "fab" props');
    });
    const I = r(() => s ? "a" : M ? "router-link" : "button"), B = r(
      () => l.pastel ? `--${l.color}-pastel` : l.outline ? `--${l.color}-outline` : `--${l.color}`
    ), b = r(
      () => (l.loading || l.disabled) && I.value === "button"
    ), y = r(() => b.value ? "--cursor-default" : "--cursor-pointer"), $ = r(() => `--is-${l.variant}`), h = r(() => l.loading && l.variant === "button"), t = r(() => !!k["left-icon"] || l.leftIcon), c = r(() => !!k["right-icon"] || l.rightIcon), p = r(() => t.value || c.value), V = r(() => l.fab && (l.icon || !!k.icon)), E = r(() => I.value === "button" ? l.type : void 0);
    return (o, R) => (a(), u(S(I.value), {
      disabled: b.value || void 0,
      class: z(["m-btn", [
        `--${o.size}`,
        !o.fab && o.roundedSize && `--rounded-${o.roundedSize}`,
        B.value,
        y.value,
        $.value,
        {
          "--block": o.block,
          "--no-underline": o.noUnderline,
          "--fab": o.fab,
          "--loading": o.loading,
          "--disabled": b.value,
          "--icon": p.value,
          "--rounded": o.rounded,
          "--no-rounded": o.noRounded,
          "--no-padding": o.noPadding,
          "--no-elevation": o.noElevation
        }
      ]]),
      type: E.value
    }, {
      default: F(() => [
        t.value ? (a(), v(
          "div",
          {
            key: 0,
            class: z(["m-btn__icon-left maz-flex maz-flex-center", { "maz-invisible": h.value }])
          },
          [
            i(`
        @slot left-icon - The icon to display on the left of the button
      `),
            C(o.$slots, "left-icon", {}, () => [
              typeof o.leftIcon == "string" ? (a(), u(f(d), {
                key: 0,
                name: o.leftIcon
              }, null, 8, ["name"])) : o.leftIcon ? (a(), u(S(o.leftIcon), { key: 1 })) : i("v-if", !0)
            ], !0)
          ],
          2
          /* CLASS */
        )) : i("v-if", !0),
        V.value ? (a(), v(
          "div",
          {
            key: 1,
            class: z(["m-btn__icon", { "maz-invisible": h.value }])
          },
          [
            i(`
        @slot icon - The icon to display on the fab button
      `),
            C(o.$slots, "icon", {}, () => [
              typeof o.icon == "string" ? (a(), u(f(d), {
                key: 0,
                name: o.icon
              }, null, 8, ["name"])) : o.icon ? (a(), u(S(o.icon), { key: 1 })) : i("v-if", !0)
            ], !0)
          ],
          2
          /* CLASS */
        )) : i("v-if", !0),
        o.$slots.default ? (a(), v(
          "span",
          {
            key: 2,
            class: z([{ "maz-invisible": h.value }, o.contentClass])
          },
          [
            i(`
        @slot default - The content of the button
      `),
            C(o.$slots, "default", {}, void 0, !0)
          ],
          2
          /* CLASS */
        )) : i("v-if", !0),
        c.value ? (a(), v(
          "div",
          {
            key: 3,
            class: z(["m-btn__icon-right", { "maz-invisible": h.value }])
          },
          [
            i(`
        @slot right-icon - The icon to display on the right of the button
      `),
            C(o.$slots, "right-icon", {}, () => [
              typeof o.rightIcon == "string" ? (a(), u(f(d), {
                key: 0,
                name: o.rightIcon
              }, null, 8, ["name"])) : o.rightIcon ? (a(), u(S(o.rightIcon), { key: 1 })) : i("v-if", !0)
            ], !0)
          ],
          2
          /* CLASS */
        )) : i("v-if", !0),
        h.value ? (a(), u(f(n), {
          key: 4,
          class: "m-btn-loader",
          size: "2em",
          color: o.color
        }, null, 8, ["color"])) : i("v-if", !0)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["disabled", "class", "type"]));
  }
}), H = (m, l) => {
  const n = m.__vccOpts || m;
  for (const [d, s] of l)
    n[d] = s;
  return n;
}, A = /* @__PURE__ */ H(de, [["__scopeId", "data-v-48f14785"]]), ce = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: A
}, Symbol.toStringTag, { value: "Module" }));
function fe({
  componentName: m,
  providedId: l
}) {
  const n = oe();
  return r(() => l ?? `${m}-${n == null ? void 0 : n.uid}`);
}
const me = {
  key: 0,
  class: "m-input-wrapper-left"
}, pe = { class: "m-input-wrapper-input" }, ve = ["id", "type", "name", "inputmode", "placeholder", "aria-label", "disabled", "readonly", "required"], be = { key: 0 }, ye = {
  key: 1,
  class: "m-input-wrapper-right"
}, he = /* @__PURE__ */ q({
  inheritAttrs: !1,
  __name: "MazInput",
  props: {
    style: { default: void 0 },
    class: { default: void 0 },
    modelValue: { default: void 0 },
    placeholder: { default: void 0 },
    label: { default: void 0 },
    name: { default: void 0 },
    color: { default: "primary" },
    type: { default: "text" },
    required: { type: Boolean, default: !1 },
    disabled: { type: Boolean, default: !1 },
    readonly: { type: Boolean, default: !1 },
    id: { default: void 0 },
    error: { type: Boolean, default: !1 },
    success: { type: Boolean, default: !1 },
    warning: { type: Boolean, default: !1 },
    hint: { default: void 0 },
    inputClasses: { default: void 0 },
    noBorder: { type: Boolean, default: !1 },
    noRadius: { type: Boolean, default: !1 },
    inputmode: { default: "text" },
    size: { default: "md" },
    debounce: { type: [Boolean, Number], default: !1 },
    debounceDelay: { default: 500 },
    validButton: { type: Boolean, default: !1 },
    validButtonLoading: { type: Boolean, default: !1 },
    autoFocus: { type: Boolean, default: !1 },
    borderActive: { type: Boolean, default: !1 },
    leftIcon: { type: [String, Function, Object], default: void 0 },
    rightIcon: { type: [String, Function, Object], default: void 0 },
    roundedSize: { default: void 0 },
    block: { type: Boolean }
  },
  emits: ["update:model-value", "focus", "blur", "click", "change"],
  setup(m, { emit: l }) {
    const n = m, d = l, s = w(() => Promise.resolve().then(() => ce)), M = w(() => import("./MazIcon-BDGxCy9M.mjs")), k = w(() => import("./eye-slash-tjfxO0LK.mjs")), I = w(() => import("./eye-DqO_Jx56.mjs")), B = w(() => import("./check-CL-vqe79.mjs")), b = O(!1), y = O(!1), $ = O(), h = fe({
      componentName: "MazInput",
      providedId: n.id
    });
    le(() => {
      var e;
      n.autoFocus && ((e = $.value) == null || e.focus());
    });
    const t = r(() => n.type === "password"), c = r(() => b.value ? "text" : n.type), p = r(() => {
      if (!n.noBorder) {
        if (n.error)
          return "maz-border-danger";
        if (n.success)
          return "maz-border-success";
        if (n.warning)
          return "maz-border-warning";
        if (y.value || n.borderActive) {
          if (n.color === "black")
            return "maz-border-black";
          if (n.color === "danger")
            return "maz-border-danger";
          if (n.color === "info")
            return "maz-border-info";
          if (n.color === "primary")
            return "maz-border-primary";
          if (n.color === "secondary")
            return "maz-border-secondary";
          if (n.color === "success")
            return "maz-border-success";
          if (n.color === "warning")
            return "maz-border-warning";
          if (n.color === "white")
            return "maz-border-white";
        }
        return "--default-border";
      }
    }), V = U(), E = r(() => {
      const { required: e, placeholder: g } = n;
      if (g)
        return e ? `${g} *` : g;
    }), o = r(() => P.value !== void 0 && P.value !== ""), R = G(
      (e) => {
        d("update:model-value", e);
      },
      typeof n.debounce == "number" ? n.debounce : n.debounceDelay ?? 500
    );
    function J(e) {
      if (n.debounce)
        return R(e);
      d("update:model-value", e);
    }
    const P = r({
      get: () => n.modelValue,
      set: (e) => J(e)
    }), Q = r(() => (!!n.label || !!n.hint) && (y.value || !!o.value || !!n.placeholder || ["date", "month", "week"].includes(n.type))), W = r(() => !!n.label || !!n.hint);
    function X() {
      return !!V["right-icon"] || t.value || !!V["valid-button"] || n.validButton || !!n.rightIcon;
    }
    function Z() {
      return !!V["left-icon"] || !!n.leftIcon;
    }
    function _(e) {
      d("focus", e), y.value = !0;
    }
    function x(e) {
      d("blur", e), y.value = !1;
    }
    function ee(e) {
      return d("change", e);
    }
    return (e, g) => (a(), v(
      "div",
      {
        class: z(["m-input", [
          {
            "--is-focused": y.value || e.borderActive,
            "--should-up": Q.value,
            "--has-label": W.value,
            "--is-disabled": e.disabled,
            "--is-readonly": e.readonly,
            "--has-z-2": e.error || e.warning || e.success,
            "--has-state": e.error || e.warning || e.success,
            "--block": e.block
          },
          n.class,
          `--${e.color}`,
          `--${e.size}`
        ]]),
        style: K(e.style)
      },
      [
        T(
          "div",
          {
            class: z(["m-input-wrapper", [
              e.inputClasses,
              p.value,
              e.roundedSize ? `--rounded-${e.roundedSize}` : { "maz-rounded": !e.noRadius }
            ]])
          },
          [
            Z() ? (a(), v("div", me, [
              i(`
          @slot left-icon - The icon to display on the left of the input
        `),
              e.$slots["left-icon"] || e.leftIcon ? C(e.$slots, "left-icon", { key: 0 }, () => [
                typeof e.leftIcon == "string" ? (a(), u(f(M), {
                  key: 0,
                  name: e.leftIcon,
                  class: "maz-text-xl maz-text-muted"
                }, null, 8, ["name"])) : e.leftIcon ? (a(), u(S(e.leftIcon), {
                  key: 1,
                  class: "maz-text-xl maz-text-muted"
                })) : i("v-if", !0)
              ], !0) : i("v-if", !0)
            ])) : i("v-if", !0),
            T("div", pe, [
              ae(T("input", Y({
                id: f(h),
                ref_key: "input",
                ref: $,
                "onUpdate:modelValue": g[0] || (g[0] = (D) => P.value = D),
                type: c.value,
                name: e.name
              }, e.$attrs, {
                inputmode: e.inputmode,
                placeholder: E.value,
                "aria-label": e.label || e.placeholder,
                disabled: e.disabled,
                readonly: e.readonly,
                required: e.required,
                class: "m-input-input"
              }, ie({
                blur: x,
                focus: _,
                change: ee
              }, !0), {
                onClick: g[1] || (g[1] = (D) => e.$emit("click", D))
              }), null, 16, ve), [
                [re, P.value]
              ]),
              e.label || e.hint ? (a(), v(
                "span",
                {
                  key: 0,
                  class: z(["m-input-label", [
                    {
                      "maz-text-danger-600": e.error,
                      "maz-text-success-600": e.success,
                      "maz-text-warning-600": e.warning
                    }
                  ]])
                },
                [
                  se(
                    ue(e.hint || e.label) + " ",
                    1
                    /* TEXT */
                  ),
                  e.required ? (a(), v("sup", be, "*")) : i("v-if", !0)
                ],
                2
                /* CLASS */
              )) : i("v-if", !0)
            ]),
            X() ? (a(), v("div", ye, [
              i(`
          @slot right-icon - The icon to display on the right of the input
        `),
              e.$slots["right-icon"] || e.rightIcon ? C(e.$slots, "right-icon", { key: 0 }, () => [
                typeof e.rightIcon == "string" ? (a(), u(f(M), {
                  key: 0,
                  name: e.rightIcon,
                  class: "maz-text-xl maz-text-muted"
                }, null, 8, ["name"])) : e.rightIcon ? (a(), u(S(e.rightIcon), {
                  key: 1,
                  class: "maz-text-xl maz-text-muted"
                })) : i("v-if", !0)
              ], !0) : i("v-if", !0),
              t.value ? (a(), u(f(s), {
                key: 1,
                color: "transparent",
                tabindex: "-1",
                size: "mini",
                onClick: g[2] || (g[2] = j((D) => b.value = !b.value, ["stop"]))
              }, {
                default: F(() => [
                  b.value ? (a(), u(f(k), {
                    key: 0,
                    class: "maz-text-xl maz-text-muted"
                  })) : (a(), u(f(I), {
                    key: 1,
                    class: "maz-text-xl maz-text-muted"
                  }))
                ]),
                _: 1
                /* STABLE */
              })) : i("v-if", !0),
              i(`
          @slot valid-button - Replace the valid button by your own
        `),
              e.$slots["valid-button"] || e.validButton ? C(e.$slots, "valid-button", { key: 2 }, () => [
                N(f(s), {
                  color: "transparent",
                  disabled: e.disabled,
                  tabindex: "-1",
                  loading: e.validButtonLoading,
                  class: "m-input-valid-button",
                  size: "mini",
                  type: "submit"
                }, {
                  default: F(() => [
                    N(f(B), { class: "maz-text-2xl maz-text-normal" })
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["disabled", "loading"])
              ], !0) : i("v-if", !0)
            ])) : i("v-if", !0)
          ],
          2
          /* CLASS */
        )
      ],
      6
      /* CLASS, STYLE */
    ));
  }
}), ge = /* @__PURE__ */ H(he, [["__scopeId", "data-v-e9affc48"]]), ze = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "none",
  viewBox: "0 0 24 24"
}, ke = /* @__PURE__ */ T(
  "path",
  {
    stroke: "currentColor",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "stroke-width": "1.5",
    d: "M12 4.5v15m7.5-7.5h-15"
  },
  null,
  -1
  /* HOISTED */
), Ie = [
  ke
];
function Be(m, l) {
  return a(), v("svg", ze, [...Ie]);
}
const $e = { render: Be }, we = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "none",
  viewBox: "0 0 24 24"
}, Ce = /* @__PURE__ */ T(
  "path",
  {
    stroke: "currentColor",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "stroke-width": "1.5",
    d: "M5 12h14"
  },
  null,
  -1
  /* HOISTED */
), Me = [
  Ce
];
function Se(m, l) {
  return a(), v("svg", we, [...Me]);
}
const Ve = { render: Se }, Ne = /* @__PURE__ */ q({
  inheritAttrs: !1,
  __name: "MazInputNumber",
  props: {
    style: { default: void 0 },
    class: { default: void 0 },
    modelValue: { default: void 0 },
    disabled: { type: Boolean, default: !1 },
    max: { default: Number.POSITIVE_INFINITY },
    min: { default: Number.NEGATIVE_INFINITY },
    step: { default: 1 },
    size: { default: "md" },
    noButtons: { type: Boolean, default: !1 },
    textCenter: { type: Boolean, default: !0 },
    inputmode: { default: "numeric" },
    block: { type: Boolean }
  },
  emits: ["update:model-value", "focus", "blur", "click", "change"],
  setup(m, { emit: l }) {
    const n = m, d = l, s = r({
      get: () => n.modelValue,
      set: (t) => B(t)
    });
    function M(t) {
      return Math.round(t / n.step) * n.step;
    }
    function k(t) {
      if (typeof t == "number")
        return t <= n.min ? n.min : t >= n.max ? n.max : M(t);
    }
    const I = G((t) => B(t), 300);
    function B(t) {
      t = k(t), s.value !== t && d("update:model-value", t);
    }
    B(s.value);
    const b = r(() => n.modelValue && n.modelValue >= n.max), y = r(() => n.modelValue && n.modelValue <= n.min);
    function $() {
      if (!(n.disabled || b.value)) {
        if ((s.value === void 0 || s.value === null) && Number.isFinite(n.min)) {
          s.value = n.min;
          return;
        }
        s.value = (s.value ?? 0) + 1 * n.step;
      }
    }
    function h() {
      if (!(n.disabled || y.value)) {
        if ((s.value === void 0 || s.value === null) && Number.isFinite(n.min)) {
          s.value = n.min;
          return;
        }
        s.value = (s.value ?? 0) - 1 * n.step;
      }
    }
    return (t, c) => (a(), v(
      "div",
      {
        class: z(["m-input-number", [`m-input-number--${t.size}`, n.class, { "--block": t.block }]]),
        style: K(t.style)
      },
      [
        t.noButtons ? i("v-if", !0) : (a(), u(A, {
          key: 0,
          color: "transparent",
          size: t.size,
          tabindex: "-1",
          class: "m-input-number__button m-input-number__decrement-button",
          disabled: y.value || t.disabled,
          onClick: h
        }, {
          default: F(() => [
            N(f(Ve), { class: "m-input-number__button__icon" })
          ]),
          _: 1
          /* STABLE */
        }, 8, ["size", "disabled"])),
        N(ge, Y({
          "model-value": s.value,
          type: "number",
          class: ["m-input-number__input", { "--no-buttons": t.noButtons, "--text-center": t.textCenter }],
          disabled: t.disabled,
          min: t.min,
          max: t.max,
          step: t.step
        }, t.$attrs, {
          inputmode: t.inputmode,
          size: t.size,
          block: "",
          onKeydown: [
            L(j($, ["prevent"]), ["up"]),
            L(j(h, ["prevent"]), ["down"])
          ],
          onFocus: c[0] || (c[0] = (p) => t.$emit("focus", p)),
          onChange: c[1] || (c[1] = (p) => t.$emit("change", p)),
          onBlur: c[2] || (c[2] = (p) => t.$emit("blur", p)),
          onClick: c[3] || (c[3] = (p) => t.$emit("click", p)),
          "onUpdate:modelValue": c[4] || (c[4] = (p) => f(I)(p))
        }), null, 16, ["model-value", "class", "disabled", "min", "max", "step", "inputmode", "size", "onKeydown"]),
        t.noButtons ? i("v-if", !0) : (a(), u(A, {
          key: 1,
          color: "transparent",
          "no-shadow": "",
          tabindex: "-1",
          size: t.size,
          class: "m-input-number__button m-input-number__increment-button",
          disabled: b.value || t.disabled,
          onClick: $
        }, {
          default: F(() => [
            N(f($e), { class: "m-input-number__button__icon" })
          ]),
          _: 1
          /* STABLE */
        }, 8, ["size", "disabled"]))
      ],
      6
      /* CLASS, STYLE */
    ));
  }
});
export {
  H as _,
  Ne as a
};
