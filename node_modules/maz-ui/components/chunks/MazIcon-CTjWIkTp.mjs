import { defineComponent as b, ref as v, computed as g, onMounted as P, watchEffect as _, openBlock as p, createElementBlock as h, Fragment as A, createCommentVNode as i, mergeProps as C, nextTick as $ } from "vue";
import { i as q } from "./MazTable-BPMuTZbS.mjs";
const H = ["innerHTML"], G = /* @__PURE__ */ b({
  __name: "MazIcon",
  props: {
    /** The source path of the SVG file - e.g: `/icons/home.svg` */
    src: { type: String, default: void 0 },
    /** The path of the folder where the SVG files are stored - e.g: `/icons` */
    path: { type: String, default: void 0 },
    /** The name of the SVG file - e.g: `home` */
    name: { type: String, default: void 0 },
    /** The size of the SVG file - e.g: `1em` */
    size: { type: String, default: void 0 },
    /** The title of the SVG file - e.g: `Home` */
    title: { type: String, default: void 0 },
    /** The function to transform the source of the SVG file - e.g: `(svg) => svg` */
    transformSource: {
      type: Function,
      default: (s) => s
    }
  },
  emits: ["loaded", "unloaded", "error"],
  setup(s, { emit: S }) {
    const o = s, d = S, a = {}, l = v(), f = v();
    function w() {
      try {
        return q("mazIconPath");
      } catch {
        return;
      }
    }
    const m = g(() => o.path ?? w()), y = g(() => o.src ? o.src : m.value ? `${m.value}/${o.name}.svg` : `/${o.name}.svg`);
    P(() => {
      !o.name && !o.src && console.error('[maz-ui](MazIcon) you should provide "name" or "src" as prop');
    });
    function E(e, n) {
      const t = e.querySelectorAll("title");
      if (t.length > 0)
        t[0].textContent = n;
      else {
        const r = document.createElementNS("http://www.w3.org/2000/svg", "title");
        r.textContent = n, e.append(r);
      }
    }
    function M(e) {
      return Object.keys(e).reduce((n, t) => (e[t] !== !1 && e[t] !== null && e[t] !== void 0 && (n[t] = e[t]), n), {});
    }
    function z(e) {
      const n = {}, t = e.attributes;
      if (!t)
        return n;
      for (let r = t.length - 1; r >= 0; r--)
        n[t[r].name] = t[r].value;
      return n;
    }
    function T(e) {
      let n = e.cloneNode(!0);
      return n = o.transformSource(e), o.title && E(n, o.title), e.innerHTML;
    }
    async function x(e) {
      a[e] || (a[e] = L(e));
      try {
        l.value = await a[e], await $(), d("loaded", f.value);
      } catch (n) {
        l.value && (l.value = void 0, d("unloaded")), delete a[e], d("error", n);
      }
    }
    function L(e) {
      return new Promise((n, t) => {
        const r = new XMLHttpRequest();
        r.open("GET", e, !0), r.addEventListener("load", () => {
          if (r.status >= 200 && r.status < 400)
            try {
              let c = new DOMParser().parseFromString(r.responseText, "text/xml").querySelectorAll("svg")[0];
              c ? (c = o.transformSource(c), n(c)) : t(new Error('Loaded file is not valid SVG"'));
            } catch (u) {
              t(u);
            }
          else
            t(new Error("Error loading SVG"));
        }), r.addEventListener("error", (u) => t(u)), r.send();
      });
    }
    return _(() => x(y.value)), (e, n) => (p(), h(
      A,
      null,
      [
        i(" eslint-disable vue/no-v-html "),
        i(" eslint-disable vue/html-self-closing "),
        l.value ? (p(), h("svg", C({
          key: 0,
          ref_key: "svgElem",
          ref: f,
          width: "1em",
          height: "1em"
        }, {
          ...z(l.value),
          ...M(e.$attrs)
        }, {
          style: `font-size: ${s.size}`,
          innerHTML: T(l.value)
        }), null, 16, H)) : i("v-if", !0),
        i(" eslint-enable vue/no-v-html "),
        i(" eslint-enable vue/html-self-closing ")
      ],
      2112
      /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
    ));
  }
});
export {
  G as default
};
