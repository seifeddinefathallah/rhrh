import type { Color, Size } from './../types';
export interface DialogState {
    id: string;
    isActive: boolean;
    resolve: (value: unknown) => void;
    reject?: (reason?: unknown) => void;
}
export interface DialogButton {
    text?: string;
    block?: boolean;
    color?: Color;
    disabled?: boolean;
    loading?: boolean;
    outline?: boolean;
    rounded?: boolean;
    size?: Size;
}
export type DialogCustomButton = DialogButton & {
    text: string;
    type: 'resolve' | 'reject';
    response?: unknown;
};
export interface DialogData {
    /**
     * Dialog title
     */
    title?: string;
    /**
     * Dialog message
     */
    message?: string;
    /**
     * Dialog cancel text
     * @default 'Cancel'
     */
    cancelText?: string;
    /**
     * Dialog cancel button
     */
    cancelButton?: false | DialogButton;
    /**
     * Dialog confirm text
     * @default 'Confirm'
     */
    confirmText?: string;
    /**
     * Dialog confirm button
     */
    confirmButton?: false | DialogButton;
    /**
     * Dialog custom buttons
     */
    buttons?: DialogCustomButton[];
}
export declare const defaultData: {
    cancelText: string;
    confirmText: string;
    cancelButton: {
        text: string;
        color: "danger";
        outline: true;
    };
    confirmButton: {
        text: string;
        color: "success";
    };
};
declare function showDialogAndWaitChoice(identifier: string, callback?: () => unknown): Promise<unknown>;
declare function removeDialogFromState(identifier: string): {
    id: string;
    isActive: boolean;
    resolve: (value: unknown) => void;
    reject?: ((reason?: unknown) => void) | undefined;
}[];
export declare function useMazDialogPromise(): {
    data: import("vue").Ref<{
        title?: string | undefined;
        message?: string | undefined;
        cancelText?: string | undefined;
        cancelButton?: false | {
            text?: string | undefined;
            block?: boolean | undefined;
            color?: Color | undefined;
            disabled?: boolean | undefined;
            loading?: boolean | undefined;
            outline?: boolean | undefined;
            rounded?: boolean | undefined;
            size?: Size | undefined;
        } | undefined;
        confirmText?: string | undefined;
        confirmButton?: false | {
            text?: string | undefined;
            block?: boolean | undefined;
            color?: Color | undefined;
            disabled?: boolean | undefined;
            loading?: boolean | undefined;
            outline?: boolean | undefined;
            rounded?: boolean | undefined;
            size?: Size | undefined;
        } | undefined;
        buttons?: {
            text: string;
            block?: boolean | undefined;
            color?: Color | undefined;
            disabled?: boolean | undefined;
            loading?: boolean | undefined;
            outline?: boolean | undefined;
            rounded?: boolean | undefined;
            size?: Size | undefined;
            type: "resolve" | "reject";
            response?: unknown;
        }[] | undefined;
    }>;
    dialogState: import("vue").Ref<{
        id: string;
        isActive: boolean;
        resolve: (value: unknown) => void;
        reject?: ((reason?: unknown) => void) | undefined;
    }[]>;
    showDialogAndWaitChoice: typeof showDialogAndWaitChoice;
    removeDialogFromState: typeof removeDialogFromState;
    rejectDialog: (currentDialog: DialogState, response?: unknown) => void;
    resolveDialog: (currentDialog: DialogState, response?: unknown) => void;
};
export {};
