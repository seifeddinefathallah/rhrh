import { createRequire } from 'node:module';
import { green, yellow, red, bold, blueBright, bgRed, white } from 'colorette';
import { Command } from 'commander';
import { exit } from 'node:process';
import { intro, log, outro } from '@clack/prompts';
import { resolve } from 'node:path';
import 'node:fs';
import { cosmiconfig } from 'cosmiconfig';
import clear from 'clear';
import figlet from 'figlet';
import { writeFile } from 'node:fs/promises';
import tinycolor from 'tinycolor2';

async function loadConfig() {
  const explorer = cosmiconfig("maz-ui");
  const result = await explorer.search();
  if (result?.config) {
    return result;
  } else {
    throw new Error('No config file "maz-ui" found');
  }
}

const logger = {
  message: (message) => {
    console.log();
    console.log(message);
    console.log();
  },
  eol: () => {
    console.log();
  },
  success: (message) => {
    console.log();
    console.log(green(message));
    console.log();
  },
  warn: (message, error) => {
    console.log();
    console.warn(yellow(message), error ? yellow(error?.message ?? error) : "");
    console.log();
  },
  error: (message, error) => {
    console.log();
    console.error(red(message), error ? red(error?.message ?? error) : "");
    console.log();
  }
};

function clearAndPrintBanner(_clear) {
  if (_clear) {
    clear();
  }
  logger.message(bold(blueBright(figlet.textSync("maz", { horizontalLayout: "full" }))));
}

function generateColorVariants({
  kind,
  config
}) {
  const color = tinycolor(config.theme.colors?.[kind]);
  if (!color.isValid()) {
    throw new Error(`Color "${kind}" with value "${config.theme.colors?.[kind]}" is not valid`);
  }
  return {
    "50": color.clone().lighten(40).toHslString(),
    "100": color.clone().lighten(30).toHslString(),
    "200": color.clone().lighten(25).toHslString(),
    "300": color.clone().lighten(15).toHslString(),
    "400": color.clone().lighten(10).toHslString(),
    "base": color.clone().toHslString(),
    "600": color.clone().darken(10).toHslString(),
    "700": color.clone().darken(20).toHslString(),
    "800": color.clone().darken(30).toHslString(),
    "900": color.clone().darken(40).toHslString(),
    "alpha": color.clone().setAlpha(0.6).toHslString(),
    "alpha-20": color.clone().setAlpha(0.2).toHslString(),
    "alpha-10": color.clone().setAlpha(0.1).toHslString(),
    "alpha-05": color.clone().setAlpha(0.05).toHslString(),
    "contrast": getContrastColor(color.clone())
  };
}
function getContrastColor(color) {
  const luma = color.getLuminance();
  const threshold = 0.52;
  const contrast = luma < threshold ? "white" : "black";
  return tinycolor(contrast).toHslString();
}

const defaultMazUiConfig = defineConfig({
  outputCssFilePath: "./variables.css",
  theme: {
    colors: {
      primary: "hsl(210, 100%, 56%)",
      secondary: "hsl(164, 76%, 46%)",
      info: "hsl(188, 78%, 41%)",
      success: "hsl(80, 61%, 50%)",
      warning: "hsl(40, 97%, 59%)",
      danger: "hsl(1, 100%, 71%)",
      bgOverlay: "hsl(0, 0%, 0% / 30%)",
      lightTheme: {
        textColor: "hsl(0, 0%, 85%)",
        colorMuted: "hsla(0, 0%, 0%, 0.54)",
        bgColor: "hsl(0, 0%, 100%)"
      },
      darkTheme: {
        textColor: "hsl(210, 8%, 14%)",
        colorMuted: "hsla(0, 0%, 100%, 0.54)",
        bgColor: "hsl(235, 16%, 15%)"
      }
    },
    borderWidth: "0.125rem",
    borderColor: "hsl(220deg 13.04% 90.98%)",
    borderRadius: "0.5rem",
    fontFamily: `system-ui, -apple-system, blinkmacsystemfont, 'Segoe UI', roboto, oxygen,
    ubuntu, cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif`
  }
});

function getVariable({ key, value }) {
  return `  --maz-${key}: ${value};
`;
}
function getVariantColorsCSSVariables(colors) {
  let variables = "";
  for (const key in colors) {
    const color = colors[key];
    for (const shade in color) {
      const value = color[shade];
      variables += shade === "base" ? getVariable({ key: `color-${key}`, value }) : getVariable({ key: `color-${key}-${shade}`, value });
    }
    variables += "\n";
  }
  return variables;
}
function getVariablesInRoot(variables) {
  let css = ":root {\n";
  for (const variable of variables) {
    css += variable;
  }
  css += "}\n";
  return css;
}
function getNormalCSSVariables(config) {
  const normalVariables = [
    {
      key: "color-text-light",
      value: config.theme.colors.lightTheme?.textColor ? tinycolor(config.theme.colors.lightTheme?.textColor).toHslString() : void 0
    },
    {
      key: "color-muted-light",
      value: config.theme.colors.lightTheme?.colorMuted ? tinycolor(config.theme.colors.lightTheme?.colorMuted).toHslString() : void 0
    },
    ...config.theme.colors.lightTheme?.bgColor ? [
      {
        key: "bg-color-light",
        value: tinycolor(config.theme.colors.lightTheme?.bgColor).toHslString()
      },
      {
        key: "bg-color-light-light",
        value: tinycolor(config.theme.colors.lightTheme?.bgColor).darken(3.75).toHslString()
      },
      {
        key: "bg-color-light-lighter",
        value: tinycolor(config.theme.colors.lightTheme?.bgColor).darken(7.5).toHslString()
      }
    ] : [],
    {
      key: "color-text-dark",
      value: config.theme.colors.darkTheme?.textColor ? tinycolor(config.theme.colors.darkTheme?.textColor).toHslString() : void 0
    },
    {
      key: "color-muted-dark",
      value: config.theme.colors.darkTheme?.textColor ? tinycolor(config.theme.colors.darkTheme?.colorMuted).toHslString() : void 0
    },
    ...config.theme.colors.darkTheme?.bgColor ? [
      {
        key: "bg-color-dark",
        value: tinycolor(config.theme.colors.darkTheme?.bgColor).toHslString()
      },
      {
        key: "bg-color-dark-light",
        value: tinycolor(config.theme.colors.darkTheme?.bgColor).lighten(3.75).toHslString()
      },
      {
        key: "bg-color-dark-lighter",
        value: tinycolor(config.theme.colors.darkTheme?.bgColor).lighten(7.5).toHslString()
      }
    ] : [],
    {
      key: "bg-overlay",
      value: config.theme.colors.bgOverlay ? tinycolor(config.theme.colors.bgOverlay).toHslString() : void 0
    },
    { key: "border-width", value: config.theme.borderWidth },
    { key: "border-color", value: config.theme.borderColor },
    { key: "border-radius", value: config.theme.borderRadius },
    {
      key: "font-family",
      value: typeof config.theme.fontFamily === "string" ? config.theme.fontFamily ? `${config.theme.fontFamily}, ${defaultMazUiConfig.theme.fontFamily}` : defaultMazUiConfig.theme.fontFamily : void 0
    }
  ];
  let normalVariablesCss = "";
  for (const { key, value } of normalVariables) {
    if (!value) {
      continue;
    }
    normalVariablesCss += getVariable({ key, value });
  }
  return normalVariablesCss;
}
async function generateCssFile({
  config,
  outputCssFilePath
}) {
  if (!config.theme.colors) {
    throw new Error('No colors found in "config.theme.colors"');
  }
  const variantColors = Object.keys(config.theme.colors).filter(
    (color) => !["bgOverlay", "lightTheme", "darkTheme"].includes(color)
  );
  const colorsConfig = {};
  for (const color of variantColors) {
    const variants = generateColorVariants({
      kind: color,
      config
    });
    colorsConfig[color] = variants;
  }
  const css = getVariablesInRoot([
    getVariantColorsCSSVariables(colorsConfig),
    getNormalCSSVariables(config)
  ]);
  const outputPath = resolve(process.cwd(), outputCssFilePath);
  await writeFile(outputPath, css);
  return { outputPath, css };
}

function generateCssVariables() {
  const command = new Command("generate-css-vars");
  command.description("Generate CSS variables file for maz-ui library").action(async () => {
    try {
      intro("Genating CSS variables file <> Maz-UI");
      const { config, filepath, isEmpty } = await loadConfig();
      if (isEmpty) {
        throw new Error("maz-ui config file is empty");
      }
      if (!config.outputCssFilePath) {
        throw new Error('Property "outputCssFilePath" not provided in config file maz-ui');
      }
      log.success(`Config file found in ${filepath}`);
      const { outputPath } = await generateCssFile({
        config,
        outputCssFilePath: config.outputCssFilePath
      });
      outro(`CSS file generated in ${green(outputPath)}`);
    } catch (error) {
      log.error("An error occured while generating CSS file");
      log.error(red(error.message ?? error));
      log.error("");
      exit(1);
    }
  });
  return command;
}

const commands = [generateCssVariables];

function defineConfig(mazUiConfig) {
  return mazUiConfig;
}

const nodeRequire = createRequire(import.meta.url);
const { version } = nodeRequire("../package.json");
const name = "maz";
const program = new Command();
const argv = process.argv.slice(2);
const hasSilentOption = argv?.find((argument) => ["-s", "--silent"].includes(argument));
if (!hasSilentOption) {
  clearAndPrintBanner(true);
}
program.option("-s --silent", "Disable CLI banner log", false);
program.version(`${name} ${version}`).usage("<command> [options]");
program.arguments("[command]").action((cmd) => {
  program.outputHelp();
  if (cmd) {
    const info = bgRed(white(` ${cmd} `));
    logger.error(`\u26D4\uFE0F Unknown command ${info}`);
  }
});
program.on("--help", () => {
  const info = bold(blueBright(`${name} <command> --help`));
  logger.message(`  Run ${info} for detailed usage of given command`);
});
for (const command of commands) {
  program.addCommand(command());
}
program.parse();

export { defineConfig };
