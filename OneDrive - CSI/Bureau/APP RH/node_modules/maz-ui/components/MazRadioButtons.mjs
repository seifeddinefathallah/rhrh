import { defineComponent as k, defineAsyncComponent as _, openBlock as r, createElementBlock as s, normalizeClass as f, Fragment as B, renderList as C, normalizeStyle as b, createElementVNode as h, createVNode as y, Transition as S, withCtx as $, withDirectives as w, unref as V, vShow as N, createCommentVNode as z, renderSlot as I, createTextVNode as q, toDisplayString as D } from "vue";
import './assets/MazRadioButtons.css';const M = ["for", "aria-checked", "onKeydown"], O = ["id", "name", "value", "onChange"], R = {
  key: 0,
  class: "m-radio-buttons__items__checkbox"
}, T = /* @__PURE__ */ k({
  __name: "MazRadioButtons",
  props: {
    modelValue: { type: [String, Number, Boolean], default: void 0 },
    options: {},
    name: { default: "MazButtonsRadio" },
    color: { default: "primary" },
    elevation: { type: Boolean, default: !1 },
    orientation: { default: "row" },
    noWrap: { type: Boolean, default: !1 },
    equalSize: { type: Boolean, default: !1 },
    selector: { type: Boolean, default: !1 },
    block: { type: Boolean, default: !1 }
  },
  emits: ["update:model-value", "change"],
  setup(t, { emit: d }) {
    const l = t, u = d, i = _(() => import("./chunks/check-CL-vqe79.mjs"));
    function v(e) {
      u("update:model-value", e.value);
    }
    function o(e) {
      return l.modelValue === e;
    }
    function g(e, n) {
      ["Space"].includes(e.code) && (e.preventDefault(), v(n));
    }
    function c(e, n) {
      return `option-${n}-${e.value.toString()}-${l.name}`;
    }
    return (e, n) => (r(), s(
      "div",
      {
        class: f(["m-radio-buttons", [`--${e.orientation}`, { "--no-wrap": e.noWrap, "--block": e.block }]])
      },
      [
        (r(!0), s(
          B,
          null,
          C(e.options, (a, m) => (r(), s("label", {
            key: c(a, m),
            for: c(a, m),
            class: f(["m-radio-buttons__items maz-group", [
              {
                "--is-selected": o(a.value),
                "--elevation": e.elevation,
                "--equal-size": e.equalSize
              },
              a.classes
            ]]),
            tabindex: "0",
            style: b([
              o(a.value) ? {
                color: `var(--maz-color-${e.color}-contrast)`,
                backgroundColor: `var(--maz-color-${e.color})`
              } : {},
              a.style
            ]),
            role: "radio",
            "aria-checked": o(a.value),
            onKeydown: (p) => g(p, a)
          }, [
            h("input", {
              id: c(a, m),
              type: "radio",
              name: e.name,
              value: a.value,
              class: "maz-hidden",
              onChange: (p) => v(a)
            }, null, 40, O),
            e.selector ? (r(), s("div", R, [
              h(
                "span",
                {
                  class: f({
                    "--is-selected": o(a.value)
                  }),
                  style: b([
                    o(a.value) ? { backgroundColor: `var(--maz-color-${l.color}-600)` } : {}
                  ])
                },
                [
                  y(
                    S,
                    {
                      name: "maz-radio-buttons-scale",
                      persisted: ""
                    },
                    {
                      default: $(() => [
                        w(y(
                          V(i),
                          { class: "maz-h-full maz-w-full" },
                          null,
                          512
                          /* NEED_PATCH */
                        ), [
                          [N, o(a.value)]
                        ])
                      ]),
                      _: 2
                      /* DYNAMIC */
                    },
                    1024
                    /* DYNAMIC_SLOTS */
                  )
                ],
                6
                /* CLASS, STYLE */
              )
            ])) : z("v-if", !0),
            z(`
        @slot Label of the radio
          @binding {Boolean} selected - If the option is selected
          @binding {string | number | boolean} option - The value of the option
      `),
            I(e.$slots, "default", {
              option: a,
              selected: o(a.value)
            }, () => [
              q(
                D(a.label),
                1
                /* TEXT */
              )
            ], !0)
          ], 46, M))),
          128
          /* KEYED_FRAGMENT */
        ))
      ],
      2
      /* CLASS */
    ));
  }
}), E = (t, d) => {
  const l = t.__vccOpts || t;
  for (const [u, i] of d)
    l[u] = i;
  return l;
}, L = /* @__PURE__ */ E(T, [["__scopeId", "data-v-16df866e"]]);
export {
  L as default
};
